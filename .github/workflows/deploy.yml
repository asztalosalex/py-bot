name: Deploy to VPS

on:
  push:
    branches: [ "main" ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    # Add permissions to limit scope
    permissions:
      contents: read
      
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Set up SSH
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_KNOWN_HOSTS: ${{ secrets.SSH_KNOWN_HOSTS }}
          VPS_HOST: ${{ secrets.VPS_HOST }}
          VPS_USERNAME: ${{ secrets.VPS_USERNAME }}
        run: |
          # Setup SSH directory and keys
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          echo "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts
          
          # Minimal debug info without exposing keys
          echo "=== SSH Configuration ==="
          ls -l ~/.ssh/ | grep -v "^-" # Only show directory structure, not file contents
          echo "=== Verifying SSH Setup ==="
          if [ -s ~/.ssh/id_ed25519 ] && [ -s ~/.ssh/known_hosts ]; then
            echo "✓ SSH files are set up"
          else
            echo "✗ SSH files are missing or empty"
            exit 1
          fi

      - name: Test Connection
        env:
          VPS_HOST: ${{ secrets.VPS_HOST }}
          VPS_USERNAME: ${{ secrets.VPS_USERNAME }}
        run: |
          # Test connection without verbose output
          if ssh -o BatchMode=yes -o StrictHostKeyChecking=no -i ~/.ssh/id_ed25519 $VPS_USERNAME@$VPS_HOST 'exit 0'; then
            echo "✓ SSH connection successful"
          else
            echo "✗ SSH connection failed"
            exit 1
          fi

      - name: Deploy to VPS
        if: success()
        env:
          VPS_HOST: ${{ secrets.VPS_HOST }}
          VPS_USERNAME: ${{ secrets.VPS_USERNAME }}
          DEPLOY_PATH: /home/alex/python/discord-bot-python
        run: |
          echo "=== Starting Deployment ==="
          ssh -o BatchMode=yes $VPS_USERNAME@$VPS_HOST 'sudo systemctl stop pybot || true'
          
          echo "=== Deploying Code ==="
          rsync -az --delete \
            --exclude '.git*' \
            --exclude '__pycache__' \
            --exclude '*.pyc' \
            --exclude '.env' \
            --exclude '.venv' \
            ./ $VPS_USERNAME@$VPS_HOST:$DEPLOY_PATH/
          
          echo "=== Setting up Virtual Environment ==="
          ssh $VPS_USERNAME@$VPS_HOST "cd $DEPLOY_PATH && [ ! -d .venv ] && python3 -m venv .venv || true"
          
          echo "=== Installing Dependencies ==="
          ssh $VPS_USERNAME@$VPS_HOST "cd $DEPLOY_PATH && .venv/bin/pip install -r requirements.txt"
          
          echo "=== Managing Service ==="
          ssh $VPS_USERNAME@$VPS_HOST 'sudo systemctl restart pybot'

      - name: Verify Deployment
        if: success()
        env:
          VPS_HOST: ${{ secrets.VPS_HOST }}
          VPS_USERNAME: ${{ secrets.VPS_USERNAME }}
        run: |
          echo "=== Checking Service Status ==="
          if ssh $VPS_USERNAME@$VPS_HOST 'systemctl is-active --quiet pybot'; then
            echo "✓ Service is running"
          else
            echo "✗ Service failed to start"
            exit 1
          fi 