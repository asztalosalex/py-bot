name: Deploy to VPS

on:
  push:
    branches: ["main"]

jobs:
  deploy:
    runs-on: ubuntu-latest
    # Restrict permissions to minimum required
    permissions:
      contents: read
      deployments: write

    steps:
      - uses: actions/checkout@v4

      - name: Set up SSH
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_KNOWN_HOSTS: ${{ secrets.SSH_KNOWN_HOSTS }}
          VPS_HOST: ${{ secrets.VPS_HOST }}
          VPS_USERNAME: ${{ secrets.VPS_USERNAME }}
          DEPLOY_PATH: ${{ secrets.DEPLOY_PATH }}
          SERVICE_NAME: ${{ secrets.SERVICE_NAME }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/gitcicd
          chmod 600 ~/.ssh/gitcicd
          echo "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts
          chmod 600 ~/.ssh/known_hosts

      - name: Test Connection
        env:
          VPS_HOST: ${{ secrets.VPS_HOST }}
          VPS_USERNAME: ${{ secrets.VPS_USERNAME }}
        run: |
          if ! ssh -o BatchMode=yes -i ~/.ssh/gitcicd $VPS_USERNAME@$VPS_HOST 'exit 0'; then
            echo "Failed to establish SSH connection"
            exit 1
          fi

      - name: Deploy to VPS
        if: success()
        env:
          VPS_HOST: ${{ secrets.VPS_HOST }}
          VPS_USERNAME: ${{ secrets.VPS_USERNAME }}
          DEPLOY_PATH: ${{ secrets.DEPLOY_PATH }}
          SERVICE_NAME: ${{ secrets.SERVICE_NAME }}
        run: |
          echo "=== Starting Deployment ==="
          # Check for rsync
          if ! ssh -i ~/.ssh/gitcicd $VPS_USERNAME@$VPS_HOST 'command -v rsync > /dev/null'; then
            echo "Installing required packages..."
            ssh $VPS_USERNAME@$VPS_HOST 'sudo -n apt-get update > /dev/null && sudo -n apt-get install -y rsync > /dev/null'
          fi

          echo "=== Managing Service ==="
          if ! ssh -i ~/.ssh/gitcicd $VPS_USERNAME@$VPS_HOST "sudo -n systemctl stop ${SERVICE_NAME} > /dev/null 2>&1"; then
            echo "Service stop failed"
            exit 1
          fi

          echo "=== Deploying Code ==="
          if !rsync -azv -e "ssh -i ~/.ssh/gitcicd -o StrictHostKeyChecking=no" --delete \
            --exclude '.git*' \
            --exclude '__pycache__' \
            --exclude '*.pyc' \
            --exclude '.env' \
            --exclude '.venv' \
            --exclude 'logs/' \
            --exclude 'tmp/' \
            ./ $VPS_USERNAME@$VPS_HOST:$DEPLOY_PATH/; then
            echo "Deployment failed - checking directory permissions"
            ssh $VPS_USERNAME@$VPS_HOST "ls -la \$(dirname $DEPLOY_PATH); ls -la $DEPLOY_PATH 2>/dev/null || echo 'Cannot access target directory'"
            exit 1
          fi

      - name: Build Docker Image on VPS
        if: success()
        env:
          VPS_HOST: ${{ secrets.VPS_HOST }}
          VPS_USERNAME: ${{ secrets.VPS_USERNAME }}
          DEPLOY_PATH: ${{ secrets.DEPLOY_PATH }}
          SERVICE_NAME: ${{ secrets.SERVICE_NAME }}
        run: |
          echo "=== Build Docker image on VPS ==="
          ssh -i ~/.ssh/gitcicd -o StrictHostKeyChecking=no $VPS_USERNAME@$VPS_HOST "bash -s" <<EOF
            set -e
            echo "Stopping old container..."
            docker stop pybot 2>/dev/null || echo "No running container to stop"
            docker ps -a --filter ancestor=pybot -q | xargs -r docker rm -f
            docker rmi -f pybot 2>/dev/null || echo "Image not found"
            echo "Building Docker image..."
            cd $DEPLOY_PATH
            docker build --no-cache -t pybot .
            echo "Restarting service..."
            sudo systemctl restart $SERVICE_NAME
          EOF

      - name: Verify Deployment
        if: success()
        env:
          VPS_HOST: ${{ secrets.VPS_HOST }}
          VPS_USERNAME: ${{ secrets.VPS_USERNAME }}
          SERVICE_NAME: ${{ secrets.SERVICE_NAME }}
        run: |
          echo "=== Checking Service Status ==="
          if ssh $VPS_USERNAME@$VPS_HOST "sudo -n systemctl status ${SERVICE_NAME}"; then
            echo "✓ Service is running and healthy"
          else
            echo "✗ Service status check failed"
            ssh $VPS_USERNAME@$VPS_HOST "sudo -n journalctl -u ${SERVICE_NAME} --no-pager -n 20" || true
            exit 1
          fi
