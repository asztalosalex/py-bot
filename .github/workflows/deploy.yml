name: Deploy to VPS

on:
  push:
    branches: [ "main" ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    # Restrict permissions to minimum required
    permissions:
      contents: read
      deployments: write
      
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Set up SSH
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_KNOWN_HOSTS: ${{ secrets.SSH_KNOWN_HOSTS }}
          VPS_HOST: ${{ secrets.VPS_HOST }}
          VPS_USERNAME: ${{ secrets.VPS_USERNAME }}
          DEPLOY_PATH: ${{ secrets.DEPLOY_PATH }}
          SERVICE_NAME: ${{ secrets.SERVICE_NAME }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          echo "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts
          chmod 600 ~/.ssh/known_hosts

      - name: Test Connection
        env:
          VPS_HOST: ${{ secrets.VPS_HOST }}
          VPS_USERNAME: ${{ secrets.VPS_USERNAME }}
        run: |
          if ! ssh -o BatchMode=yes -i ~/.ssh/id_ed25519 $VPS_USERNAME@$VPS_HOST 'exit 0'; then
            echo "Failed to establish SSH connection"
            exit 1
          fi

      - name: Deploy to VPS
        if: success()
        env:
          VPS_HOST: ${{ secrets.VPS_HOST }}
          VPS_USERNAME: ${{ secrets.VPS_USERNAME }}
          DEPLOY_PATH: ${{ secrets.DEPLOY_PATH }}
          SERVICE_NAME: ${{ secrets.SERVICE_NAME }}
        run: |
          echo "=== Starting Deployment ==="
          # Check for rsync
          if ! ssh $VPS_USERNAME@$VPS_HOST 'command -v rsync > /dev/null'; then
            echo "Installing required packages..."
            ssh $VPS_USERNAME@$VPS_HOST 'sudo -n apt-get update > /dev/null && sudo -n apt-get install -y rsync > /dev/null'
          fi
          
          echo "=== Managing Service ==="
          if ! ssh $VPS_USERNAME@$VPS_HOST "sudo -n systemctl stop ${SERVICE_NAME} > /dev/null 2>&1"; then
            echo "Service stop failed"
            exit 1
          fi
          
          echo "=== Deploying Code ==="
          if ! rsync -azv --delete \
            --exclude '.git*' \
            --exclude '__pycache__' \
            --exclude '*.pyc' \
            --exclude '.env' \
            --exclude '.venv' \
            --exclude 'logs/' \
            --exclude 'tmp/' \
            ./ $VPS_USERNAME@$VPS_HOST:$DEPLOY_PATH/; then
            echo "Deployment failed - checking directory permissions"
            ssh $VPS_USERNAME@$VPS_HOST "ls -la \$(dirname $DEPLOY_PATH); ls -la $DEPLOY_PATH 2>/dev/null || echo 'Cannot access target directory'"
            exit 1
          fi
          
          echo "=== Setting up Virtual Environment ==="
          if ! ssh $VPS_USERNAME@$VPS_HOST "cd $DEPLOY_PATH && \
            rm -rf .venv && \
            python3 -m venv .venv && \
            source .venv/bin/activate && \
            python3 -m pip install --upgrade pip > /dev/null && \
            python3 -m pip install -r requirements.txt > /dev/null"; then
            echo "Virtual environment setup failed"
            exit 1
          fi
          
          echo "=== Restarting Service ==="
          if ! ssh $VPS_USERNAME@$VPS_HOST "sudo -n systemctl restart ${SERVICE_NAME} > /dev/null 2>&1"; then
            echo "Service restart failed"
            exit 1
          fi

      - name: Verify Deployment
        if: success()
        env:
          VPS_HOST: ${{ secrets.VPS_HOST }}
          VPS_USERNAME: ${{ secrets.VPS_USERNAME }}
          SERVICE_NAME: ${{ secrets.SERVICE_NAME }}
        run: |
          echo "=== Checking Service Status ==="
          if ! ssh $VPS_USERNAME@$VPS_HOST "sudo -n systemctl status ${SERVICE_NAME}"; then
            echo "✗ Service failed to start - checking logs"
            ssh $VPS_USERNAME@$VPS_HOST "sudo -n journalctl -u ${SERVICE_NAME} --no-pager -n 20"
            exit 1
          fi
          if ! ssh $VPS_USERNAME@$VPS_HOST "sudo -n systemctl is-active ${SERVICE_NAME}"; then
            echo "✗ Service is not running"
            exit 1
          fi
          echo "✓ Service is running" 