name: Deploy to VPS

on:
  push:
    branches: [ "main" ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    # Restrict permissions to minimum required
    permissions:
      contents: read
      deployments: write
      
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Set up SSH
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_KNOWN_HOSTS: ${{ secrets.SSH_KNOWN_HOSTS }}
          VPS_HOST: ${{ secrets.VPS_HOST }}
          VPS_USERNAME: ${{ secrets.VPS_USERNAME }}
          DEPLOY_PATH: ${{ secrets.DEPLOY_PATH }}
          SERVICE_NAME: ${{ secrets.SERVICE_NAME }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          echo "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts
          chmod 600 ~/.ssh/known_hosts

      - name: Test Connection
        env:
          VPS_HOST: ${{ secrets.VPS_HOST }}
          VPS_USERNAME: ${{ secrets.VPS_USERNAME }}
        run: |
          if ! ssh -o BatchMode=yes -i ~/.ssh/id_ed25519 $VPS_USERNAME@$VPS_HOST 'exit 0'; then
            echo "Failed to establish SSH connection"
            exit 1
          fi

      - name: Deploy to VPS
        if: success()
        env:
          VPS_HOST: ${{ secrets.VPS_HOST }}
          VPS_USERNAME: ${{ secrets.VPS_USERNAME }}
          DEPLOY_PATH: /home/alex/python/discord-bot-python
        run: |
          echo "=== Starting Deployment ==="
          # First check if rsync is installed
          ssh $VPS_USERNAME@$VPS_HOST 'which rsync || sudo apt-get update && sudo apt-get install -y rsync'
          
          echo "=== Stopping Service ==="
          ssh $VPS_USERNAME@$VPS_HOST 'sudo systemctl stop pybot || true'
          
          echo "=== Deploying Code ==="
          rsync -az --delete \
            --exclude '.git*' \
            --exclude '__pycache__' \
            --exclude '*.pyc' \
            --exclude '.env' \
            --exclude '.venv' \
            ./ $VPS_USERNAME@$VPS_HOST:$DEPLOY_PATH/
          
          echo "=== Setting up Virtual Environment ==="
          ssh $VPS_USERNAME@$VPS_HOST "cd $DEPLOY_PATH && [ ! -d .venv ] && python3 -m venv .venv || true"
          
          echo "=== Installing Dependencies ==="
          ssh $VPS_USERNAME@$VPS_HOST "cd $DEPLOY_PATH && .venv/bin/pip install -r requirements.txt"
          
          echo "=== Managing Service ==="
          ssh $VPS_USERNAME@$VPS_HOST 'sudo systemctl restart pybot'

      - name: Verify Deployment
        if: success()
        env:
          VPS_HOST: ${{ secrets.VPS_HOST }}
          VPS_USERNAME: ${{ secrets.VPS_USERNAME }}
          SERVICE_NAME: ${{ secrets.SERVICE_NAME }}
        run: |
          echo "=== Checking Service Status ==="
          if ! ssh $VPS_USERNAME@$VPS_HOST "systemctl is-active --quiet \$SERVICE_NAME"; then
            echo "✗ Service failed to start"
            exit 1
          fi
          echo "✓ Service is running" 